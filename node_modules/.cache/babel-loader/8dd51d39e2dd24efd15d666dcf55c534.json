{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport logger from \"redux-logger\";\nimport { persistStore } from \"redux-persist\";\nimport rootReducer from \"./root-reducer\"; // the middleware that the store is expecting from redux is going to be an array\n\nconst middlewares = [];\n\nif (process.env.NODE_ENV === \"development\") {\n  middlewares.push(logger);\n} //createStore gets the reducer and the return value of apply middleware\n// applyMiddleware(...middlewares): what this will do is it will copy all the values in the array as individual arguments to the function applyMiddleware\n\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\nexport const persistor = persistStore(store);\nexport default {\n  store,\n  persistStore\n}; // export default store;","map":{"version":3,"sources":["C:/Users/Praveen/Desktop/REACT/crown-clothing/src/redux/store.js"],"names":["createStore","applyMiddleware","logger","persistStore","rootReducer","middlewares","process","env","NODE_ENV","push","store","persistor"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,YAAT,QAA6B,eAA7B;AAEA,OAAOC,WAAP,MAAwB,gBAAxB,C,CAEA;;AACA,MAAMC,WAAW,GAAG,EAApB;;AAEA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CH,EAAAA,WAAW,CAACI,IAAZ,CAAiBP,MAAjB;AACD,C,CAED;AACA;;;AACA,OAAO,MAAMQ,KAAK,GAAGV,WAAW,CAACI,WAAD,EAAcH,eAAe,CAAC,GAAGI,WAAJ,CAA7B,CAAzB;AAEP,OAAO,MAAMM,SAAS,GAAGR,YAAY,CAACO,KAAD,CAA9B;AAEP,eAAe;AAAEA,EAAAA,KAAF;AAASP,EAAAA;AAAT,CAAf,C,CACA","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport { persistStore } from \"redux-persist\";\r\n\r\nimport rootReducer from \"./root-reducer\";\r\n\r\n// the middleware that the store is expecting from redux is going to be an array\r\nconst middlewares = [];\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  middlewares.push(logger);\r\n}\r\n\r\n//createStore gets the reducer and the return value of apply middleware\r\n// applyMiddleware(...middlewares): what this will do is it will copy all the values in the array as individual arguments to the function applyMiddleware\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nexport const persistor = persistStore(store);\r\n\r\nexport default { store, persistStore };\r\n// export default store;\r\n"]},"metadata":{},"sourceType":"module"}